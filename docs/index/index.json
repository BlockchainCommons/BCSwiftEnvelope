{"interfaceLanguages":{"swift":[{"children":[{"title":"Essentials","type":"groupMarker"},{"path":"\/documentation\/envelope\/overview","title":"Envelope Overview","type":"article"},{"path":"\/documentation\/envelope\/examples","title":"Examples","type":"article"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/assertion(_:)","title":"case assertion(Assertion)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/elided(_:)","title":"case elided(Digest)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/encrypted(_:)","title":"case encrypted(EncryptedMessage)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/knownvalue(_:_:)","title":"case knownValue(KnownValue, Digest)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/leaf(_:_:)","title":"case leaf(CBOR, Digest)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/node(subject:assertions:digest:)","title":"case node(subject: Envelope, assertions: [Envelope], digest: Digest)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/wrapped(_:_:)","title":"case wrapped(Envelope, Digest)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/cbordecode(_:)","title":"static func cborDecode(CBOR) throws -> Envelope","type":"method"}],"path":"\/documentation\/envelope\/envelope\/cbordecodable-implementations","title":"CBORDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/cbor","title":"var cbor: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/cborencode","title":"var cborEncode: Data","type":"property"}],"path":"\/documentation\/envelope\/envelope\/cborencodable-implementations","title":"CBOREncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/envelope\/envelope\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/digest","title":"var digest: Digest","type":"property"}],"path":"\/documentation\/envelope\/envelope\/digestprovider-implementations","title":"DigestProvider Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope","title":"Envelope","type":"enum"},{"title":"Creating an Envelope with a Subject","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(_:)-2fdao","title":"init(Any)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(_:)-8c8jv","title":"init(KnownValue)","type":"init"},{"title":"Adding Assertions to an Envelope","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/addassertion(_:_:salted:)-277sn","title":"func addAssertion(Any, Any?, salted: Bool) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertion(_:_:salted:)-9sf9h","title":"func addAssertion(KnownValue, Any?, salted: Bool) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertion(_:salted:)","title":"func addAssertion(Envelope?, salted: Bool) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertion(if:_:_:salted:)-1by3y","title":"func addAssertion(if: Bool, () -> Any, () -> Any?, salted: Bool) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertion(if:_:_:salted:)-58rqr","title":"func addAssertion(if: Bool, () -> KnownValue, () -> Any?, salted: Bool) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertion(if:_:salted:)","title":"func addAssertion(if: Bool, () -> Envelope?, salted: Bool) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addassertions(_:salted:)","title":"func addAssertions([Envelope], salted: Bool) throws -> Envelope","type":"method"},{"title":"Viewing Envelope Contents","type":"groupMarker"},{"path":"\/documentation\/envelope\/notation","title":"Envelope Notation","type":"article"},{"path":"\/documentation\/envelope\/outputformats","title":"Output Formats","type":"article"},{"path":"\/documentation\/envelope\/envelope\/format","title":"var format: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/treeformat(hidenodes:highlighting:)","title":"func treeFormat(hideNodes: Bool, highlighting: Set<Digest>) -> String","type":"method"},{"path":"\/documentation\/envelope\/envelope\/diag","title":"var diag: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/diagannotated","title":"var diagAnnotated: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/dump","title":"var dump: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/mermaidformat(hidenodes:layoutdirection:theme:)","title":"func mermaidFormat(hideNodes: Bool, layoutDirection: MermaidOptions.LayoutDirection?, theme: MermaidOptions.Theme?) -> String","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/init(layoutdirection:theme:includedigests:)","title":"init(layoutDirection: LayoutDirection?, theme: Theme?, includeDigests: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/includedigests","title":"let includeDigests: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.property","title":"let layoutDirection: LayoutDirection","type":"property"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.property","title":"let theme: Theme","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.enum\/lefttoright","title":"case leftToRight","type":"case"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.enum\/toptobottom","title":"case topToBottom","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/layoutdirection-swift.enum","title":"Envelope.MermaidOptions.LayoutDirection","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.enum\/color","title":"case color","type":"case"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.enum\/monochrome","title":"case monochrome","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/mermaidoptions\/theme-swift.enum","title":"Envelope.MermaidOptions.Theme","type":"enum"}],"path":"\/documentation\/envelope\/envelope\/mermaidoptions","title":"Envelope.MermaidOptions","type":"struct"},{"title":"Comparing Envelopes for Semantic Equivalence","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/digest","title":"var digest: Digest","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isequivalent(to:)","title":"func isEquivalent(to: Envelope) -> Bool","type":"method"},{"title":"Comparing Envelopes for Structural Identicality","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/structuraldigest","title":"var structuralDigest: Digest","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isidentical(to:)","title":"func isIdentical(to: Envelope) -> Bool","type":"method"},{"title":"Working With the Envelope Subject","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/subject","title":"var subject: Envelope","type":"property"},{"path":"\/documentation\/envelope\/envelope\/extractsubject(_:)","title":"func extractSubject<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/issubjectassertion","title":"var isSubjectAssertion: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectelided","title":"var isSubjectElided: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectencrypted","title":"var isSubjectEncrypted: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectobscured","title":"var isSubjectObscured: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/replacesubject(with:)","title":"func replaceSubject(with: Envelope) -> Envelope","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/init(_:_:)","title":"init(UInt64, String?)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/init(name:)","title":"init?(name: String)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/init(rawvalue:)","title":"init(rawValue: UInt64)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/init(taggedcbor:)","title":"init(taggedCBOR: CBOR) throws","type":"init"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/init(untaggedcbor:)","title":"init(untaggedCBOR: CBOR) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/assignedname","title":"let assignedName: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/rawvalue","title":"let rawValue: UInt64","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/taggedcbor","title":"var taggedCBOR: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/untaggedcbor","title":"var untaggedCBOR: CBOR","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/body","title":"static let body: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/controller","title":"static let controller: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/date","title":"static let date: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/dereferencevia","title":"static let dereferenceVia: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/diffedits","title":"static let diffEdits: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/entity","title":"static let entity: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/error","title":"static let error: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/hasname","title":"static let hasName: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/hasrecipient","title":"static let hasRecipient: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/holder","title":"static let holder: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/id","title":"static let id: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/isa","title":"static let isA: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/issuer","title":"static let issuer: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/language","title":"static let language: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/note","title":"static let note: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/ok","title":"static let ok: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/processing","title":"static let processing: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/publickeys","title":"static let publicKeys: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/result","title":"static let result: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/salt","title":"static let salt: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/sskrshare","title":"static let sskrShare: Envelope.KnownValue","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/verifiedby","title":"static let verifiedBy: Envelope.KnownValue","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/cbordecode(_:)","title":"static func cborDecode(CBOR) throws -> Envelope.KnownValue","type":"method"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/cbordecodable-implementations","title":"CBORDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/cbor","title":"var cbor: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/cborencode","title":"var cborEncode: Data","type":"property"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/cborencodable-implementations","title":"CBOREncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/digest","title":"var digest: Digest","type":"property"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/digestprovider-implementations","title":"DigestProvider Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/==(_:_:)","title":"static func == (Envelope.KnownValue, Envelope.KnownValue) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.struct","title":"Envelope.KnownValue","type":"struct"},{"title":"Working with Assertions","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(_:_:)-7fxwn","title":"init(Any, Any)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(_:_:)-8vvce","title":"init(KnownValue, Any)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/predicate","title":"var predicate: Envelope!","type":"property"},{"path":"\/documentation\/envelope\/envelope\/object","title":"var object: Envelope!","type":"property"},{"path":"\/documentation\/envelope\/envelope\/assertion-swift.property","title":"var assertion: Envelope?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/assertions","title":"var assertions: [Envelope]","type":"property"},{"path":"\/documentation\/envelope\/envelope\/hasassertions","title":"var hasAssertions: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectassertion","title":"var isSubjectAssertion: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/assertion(withpredicate:)-7asyh","title":"func assertion(withPredicate: KnownValue) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/assertion(withpredicate:)-8hkhz","title":"func assertion(withPredicate: Envelope) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/assertion(withpredicate:)-p6cf","title":"func assertion(withPredicate: CBOREncodable) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/assertions(withpredicate:)-5u4ly","title":"func assertions(withPredicate: CBOREncodable) -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/assertions(withpredicate:)-5znmy","title":"func assertions(withPredicate: Envelope) -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/assertions(withpredicate:)-817l4","title":"func assertions(withPredicate: KnownValue) -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(_:forpredicate:)-237rm","title":"func extractObject<T>(T.Type, forPredicate: KnownValue) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(_:forpredicate:)-atjk","title":"func extractObject<T>(T.Type, forPredicate: CBOREncodable) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(_:forpredicate:)-doan","title":"func extractObject<T>(T.Type, forPredicate: Envelope) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(forpredicate:)-7at6i","title":"func extractObject(forPredicate: Envelope) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(forpredicate:)-8h0e3","title":"func extractObject(forPredicate: KnownValue) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobject(forpredicate:)-786xl","title":"func extractObject(forPredicate: CBOREncodable) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobjects(_:forpredicate:)-9ghw6","title":"func extractObjects<T>(T.Type, forPredicate: KnownValue) throws -> [T]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobjects(_:forpredicate:)-9lujg","title":"func extractObjects<T>(T.Type, forPredicate: CBOREncodable) throws -> [T]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobjects(forpredicate:)-1cnrl","title":"func extractObjects(forPredicate: Envelope) -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobjects(forpredicate:)-9hhb5","title":"func extractObjects(forPredicate: KnownValue) -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/isa(_:)","title":"static func isA(Envelope) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/id(_:)","title":"static func id(CID) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/removeassertion(_:)","title":"func removeAssertion(DigestProvider) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/replaceassertion(_:with:)","title":"func replaceAssertion(DigestProvider, with: Envelope) throws -> Envelope","type":"method"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/assertion-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/envelope\/envelope\/assertion-swift.struct\/==(_:_:)","title":"static func == (Envelope.Assertion, Envelope.Assertion) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/assertion-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/assertion-swift.struct","title":"Envelope.Assertion","type":"struct"},{"title":"Elision","type":"groupMarker"},{"path":"\/documentation\/envelope\/elision","title":"Elision and Redaction","type":"article"},{"path":"\/documentation\/envelope\/envelope\/elide()","title":"func elide() -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/iselided","title":"var isElided: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectelided","title":"var isSubjectElided: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/shallowdigests","title":"var shallowDigests: Set<Digest>","type":"property"},{"path":"\/documentation\/envelope\/envelope\/deepdigests","title":"var deepDigests: Set<Digest>","type":"property"},{"path":"\/documentation\/envelope\/envelope\/digests(levellimit:)","title":"func digests(levelLimit: Int) -> Set<Digest>","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elideremoving(_:encryptingwith:)-66yx0","title":"func elideRemoving(Set<Digest>, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elideremoving(_:encryptingwith:)-4p0a2","title":"func elideRemoving(DigestProvider, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elideremoving(_:encryptingwith:)-8tgiz","title":"func elideRemoving([DigestProvider], encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/eliderevealing(_:encryptingwith:)-8o34i","title":"func elideRevealing(Set<Digest>, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/eliderevealing(_:encryptingwith:)-139hi","title":"func elideRevealing(DigestProvider, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/eliderevealing(_:encryptingwith:)-3aeex","title":"func elideRevealing([DigestProvider], encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elide(_:isrevealing:encryptingwith:)-8qngj","title":"func elide(Set<Digest>, isRevealing: Bool, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elide(_:isrevealing:encryptingwith:)-8w1o6","title":"func elide(DigestProvider, isRevealing: Bool, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/elide(_:isrevealing:encryptingwith:)-i3mw","title":"func elide([DigestProvider], isRevealing: Bool, encryptingWith: SymmetricKey?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/unelide(_:)","title":"func unelide(Envelope) throws -> Envelope","type":"method"},{"title":"Wrapping Envelopes","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/wrap()","title":"func wrap() -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/unwrap()","title":"func unwrap() throws -> Envelope","type":"method"},{"title":"Working with the Structure of Envelopes","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/isleaf","title":"var isLeaf: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isknownvalue","title":"var isKnownValue: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isnode","title":"var isNode: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/iswrapped","title":"var isWrapped: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isinternal","title":"var isInternal: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isobscured","title":"var isObscured: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/leaf","title":"var leaf: CBOR?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/knownvalue-swift.property","title":"var knownValue: KnownValue?","type":"property"},{"title":"Recursively Walking the Envelope Structure","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/elementscount","title":"var elementsCount: Int","type":"property"},{"path":"\/documentation\/envelope\/envelope\/walk(hidenodes:visit:)","title":"func walk<Parent>(hideNodes: Bool, visit: Visitor<Parent>)","type":"method"},{"path":"\/documentation\/envelope\/envelope\/visitor","title":"Envelope.Visitor","type":"typealias"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/assertion","title":"case assertion","type":"case"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/none","title":"case none","type":"case"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/object","title":"case object","type":"case"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/predicate","title":"case predicate","type":"case"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/subject","title":"case subject","type":"case"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/wrapped","title":"case wrapped","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/edgetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/edgetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/edgetype","title":"Envelope.EdgeType","type":"enum"},{"title":"Signatures","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/sign(with:tag:randomgenerator:)","title":"func sign(with: [PrivateKeyBase], tag: Data?, randomGenerator: ((Int) -> Data)?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/sign(with:note:tag:randomgenerator:)","title":"func sign(with: PrivateKeyBase, note: String?, tag: Data?, randomGenerator: ((Int) -> Data)?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/sign(with:uncoveredassertions:tag:randomgenerator:)","title":"func sign(with: PrivateKeyBase, uncoveredAssertions: [Envelope], tag: Data?, randomGenerator: ((Int) -> Data)?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/verifiedby(signature:note:)","title":"static func verifiedBy(signature: Signature, note: String?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/signatures","title":"var signatures: [Signature]","type":"property"},{"path":"\/documentation\/envelope\/envelope\/isverifiedsignature(_:publickeys:)","title":"func isVerifiedSignature(Signature, publicKeys: PublicKeyBase) -> Bool","type":"method"},{"path":"\/documentation\/envelope\/envelope\/verifysignature(from:)","title":"func verifySignature(from: PublicKeyBase) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/hasverifiedsignature(from:)","title":"func hasVerifiedSignature(from: PublicKeyBase) throws -> Bool","type":"method"},{"path":"\/documentation\/envelope\/envelope\/verifysignature(_:publickeys:)","title":"func verifySignature(Signature, publicKeys: PublicKeyBase) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/verifysignatures(from:threshold:)","title":"func verifySignatures(from: [PublicKeyBase], threshold: Int?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/hasverifiedsignatures(from:threshold:)","title":"func hasVerifiedSignatures(from: [PublicKeyBase], threshold: Int?) throws -> Bool","type":"method"},{"title":"Symmetric Key Encryption","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/encryptsubject(with:testnonce:)","title":"func encryptSubject(with: SymmetricKey, testNonce: Nonce?) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/decryptsubject(with:)","title":"func decryptSubject(with: SymmetricKey) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/isencrypted","title":"var isEncrypted: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/issubjectencrypted","title":"var isSubjectEncrypted: Bool","type":"property"},{"title":"Public Key Encryption","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/encryptsubject(to:)-hn8e","title":"func encryptSubject(to: PublicKeyBase) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/encryptsubject(to:)-40mwd","title":"func encryptSubject(to: [PublicKeyBase]) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addrecipient(_:contentkey:testkeymaterial:testnonce:)","title":"func addRecipient(PublicKeyBase, contentKey: SymmetricKey, testKeyMaterial: DataProvider?, testNonce: Nonce?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/hasrecipient(_:contentkey:testkeymaterial:testnonce:)","title":"static func hasRecipient(PublicKeyBase, contentKey: SymmetricKey, testKeyMaterial: DataProvider?, testNonce: Nonce?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/recipients","title":"var recipients: [SealedMessage]","type":"property"},{"path":"\/documentation\/envelope\/envelope\/decrypt(to:)","title":"func decrypt(to: PrivateKeyBase) throws -> Envelope","type":"method"},{"title":"Encoding and Decoding Envelopes","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/taggedcbor","title":"var taggedCBOR: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/init(taggedcbor:)","title":"init(taggedCBOR: CBOR) throws","type":"init"},{"path":"\/documentation\/envelope\/envelope\/ur","title":"var ur: UR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/init(ur:)","title":"init(ur: UR) throws","type":"init"},{"path":"\/documentation\/envelope\/envelope\/urstring","title":"var urString: String","type":"property"},{"path":"\/documentation\/envelope\/envelope\/init(urstring:)","title":"init(urString: String) throws","type":"init"},{"path":"\/documentation\/envelope\/envelope\/untaggedcbor","title":"var untaggedCBOR: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/init(untaggedcbor:)","title":"init(untaggedCBOR: CBOR) throws","type":"init"},{"title":"Splitting Envelopes with SSKR","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/split(groupthreshold:groups:contentkey:testrandomgenerator:)","title":"func split(groupThreshold: Int, groups: [(Int, Int)], contentKey: SymmetricKey, testRandomGenerator: ((Int) -> Data)?) -> [[Envelope]]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/init(shares:)","title":"init(shares: [Envelope]) throws","type":"init"},{"path":"\/documentation\/envelope\/envelope\/addsskrshare(_:)","title":"func addSSKRShare(SSKRShare) -> Envelope","type":"method"},{"title":"Noncorrelation","type":"groupMarker"},{"path":"\/documentation\/envelope\/noncorrelation","title":"Noncorrelation","type":"article"},{"path":"\/documentation\/envelope\/envelope\/addsalt()","title":"func addSalt() -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addsalt(_:)-9lg7y","title":"func addSalt(Salt) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addsalt(_:)-7vbe0","title":"func addSalt(Int) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addsalt(_:)-8vq5g","title":"func addSalt(ClosedRange<Int>) throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addsalt(using:)","title":"func addSalt<R>(using: inout R) -> Envelope","type":"method"},{"title":"Existence Proofs","type":"groupMarker"},{"path":"\/documentation\/envelope\/existenceproofs","title":"Existence Proofs","type":"article"},{"path":"\/documentation\/envelope\/envelope\/proof(contains:)-jpk9","title":"func proof(contains: Set<Digest>) -> Envelope?","type":"method"},{"path":"\/documentation\/envelope\/envelope\/proof(contains:)-fnjv","title":"func proof(contains: DigestProvider) -> Envelope?","type":"method"},{"path":"\/documentation\/envelope\/envelope\/confirm(contains:using:)-28uny","title":"func confirm(contains: Set<Digest>, using: Envelope) -> Bool","type":"method"},{"path":"\/documentation\/envelope\/envelope\/confirm(contains:using:)-bjef","title":"func confirm(contains: DigestProvider, using: Envelope) -> Bool","type":"method"},{"title":"Diffing Envelopes","type":"groupMarker"},{"path":"\/documentation\/envelope\/diffing","title":"Diffing Envelopes","type":"article"},{"path":"\/documentation\/envelope\/envelope\/diff(target:)","title":"func diff(target: Envelope) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/transform(edits:)","title":"func transform(edits: Envelope) throws -> Envelope","type":"method"},{"title":"Envelope Expressions","type":"groupMarker"},{"path":"\/documentation\/envelope\/expressions","title":"Envelope Expressions","type":"article"},{"title":"Envelope Expressions: Functions","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(function:)-1k57u","title":"init(function: String)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(function:)-20y6m","title":"init(function: FunctionIdentifier)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(function:name:)","title":"init(function: Int, name: String?)","type":"init"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/known(value:name:)","title":"case known(value: Int, name: String?)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/named(name:)","title":"case named(name: String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(_:_:)","title":"init(Int, String?)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(taggedcbor:)","title":"init(taggedCBOR: CBOR) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/isknown","title":"var isKnown: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/isnamed","title":"var isNamed: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/value","title":"var value: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/add","title":"static let add: Envelope.FunctionIdentifier","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/div","title":"static let div: Envelope.FunctionIdentifier","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/mul","title":"static let mul: Envelope.FunctionIdentifier","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/sub","title":"static let sub: Envelope.FunctionIdentifier","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/knownidentifier(for:)","title":"static func knownIdentifier(for: Int) -> Envelope.FunctionIdentifier","type":"method"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/setknownidentifier(_:)","title":"static func setKnownIdentifier(Envelope.FunctionIdentifier)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/cbordecode(_:)","title":"static func cborDecode(CBOR) throws -> Envelope.FunctionIdentifier","type":"method"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/cbordecodable-implementations","title":"CBORDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/cbor","title":"var cbor: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/cborencode","title":"var cborEncode: Data","type":"property"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/cborencodable-implementations","title":"CBOREncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/==(_:_:)","title":"static func == (Envelope.FunctionIdentifier, Envelope.FunctionIdentifier) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/functionidentifier\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/functionidentifier","title":"Envelope.FunctionIdentifier","type":"enum"},{"title":"Envelope Expressions: Parameters","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/addparameter(_:value:)-1xchn","title":"func addParameter(ParameterIdentifier, value: CBOREncodable?) -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/addparameter(_:value:)-8f3k5","title":"func addParameter(String, value: CBOREncodable?) -> Envelope","type":"method"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/known(value:name:)","title":"case known(value: Int, name: String?)","type":"case"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/named(name:)","title":"case named(name: String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(_:_:)","title":"init(Int, String?)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(taggedcbor:)","title":"init(taggedCBOR: CBOR) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/isknown","title":"var isKnown: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/isnamed","title":"var isNamed: Bool","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/value","title":"var value: Int?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/blank","title":"static let blank: Envelope.ParameterIdentifier","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/lhs","title":"static let lhs: Envelope.ParameterIdentifier","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/rhs","title":"static let rhs: Envelope.ParameterIdentifier","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/knownparameter(for:)","title":"static func knownParameter(for: Int) -> Envelope.ParameterIdentifier","type":"method"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/setknownparameter(_:)","title":"static func setKnownParameter(Envelope.ParameterIdentifier)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/cbordecode(_:)","title":"static func cborDecode(CBOR) throws -> Envelope.ParameterIdentifier","type":"method"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/cbordecodable-implementations","title":"CBORDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/cbor","title":"var cbor: CBOR","type":"property"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/cborencode","title":"var cborEncode: Data","type":"property"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/cborencodable-implementations","title":"CBOREncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/==(_:_:)","title":"static func == (Envelope.ParameterIdentifier, Envelope.ParameterIdentifier) -> Bool","type":"op"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/parameteridentifier","title":"Envelope.ParameterIdentifier","type":"enum"},{"path":"\/documentation\/envelope\/envelope\/extractobject(_:forparameter:)","title":"func extractObject<T>(T.Type, forParameter: ParameterIdentifier) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/extractobjects(_:forparameter:)","title":"func extractObjects<T>(T.Type, forParameter: ParameterIdentifier) throws -> [T]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/parameter(_:value:)-4zn4z","title":"static func parameter(ParameterIdentifier, value: CBOREncodable?) -> Envelope?","type":"method"},{"path":"\/documentation\/envelope\/envelope\/parameter(_:value:)-5mguw","title":"static func parameter(String, value: CBOREncodable?) -> Envelope?","type":"method"},{"title":"Envelope Expressions: Requests and Responses","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/init(request:body:)","title":"init(request: CID, body: CBOREncodable)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(response:result:)","title":"init(response: CID, result: CBOREncodable?)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(response:results:)","title":"init(response: CID, results: [CBOREncodable])","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(response:error:)","title":"init(response: CID, error: CBOREncodable)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/init(error:)","title":"init(error: CBOREncodable?)","type":"init"},{"path":"\/documentation\/envelope\/envelope\/result()","title":"func result() throws -> Envelope","type":"method"},{"path":"\/documentation\/envelope\/envelope\/results()","title":"func results() -> [Envelope]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/result(_:)","title":"func result<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/envelope\/envelope\/results(_:)","title":"func results<T>(T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/envelope\/envelope\/isresultok()","title":"func isResultOK() throws -> Bool","type":"method"},{"path":"\/documentation\/envelope\/envelope\/error(_:)","title":"func error<T>(T.Type) throws -> T","type":"method"},{"title":"Debugging Tools","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/checkencoding()","title":"func checkEncoding() throws -> Envelope","type":"method"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/error\/type","title":"let type: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/envelope\/envelope\/error\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelope\/error\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/error\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/error\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/envelope\/envelope\/error\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/envelope\/envelope\/error\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/envelope\/envelope\/error","title":"Envelope.Error","type":"struct"},{"title":"Test Vectors","type":"groupMarker"},{"path":"\/documentation\/envelope\/envelopetestvectors","title":"Envelope Test Vectors","type":"article"},{"path":"\/documentation\/envelope\/sskrtestvectors","title":"SSKR Test Vectors","type":"article"}],"path":"\/documentation\/envelope","title":"Envelope","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}