import XCTest
import SecureComponents
import Envelope
import WolfBase

class GraphTests: XCTestCase {
    // https://jsonld.com/person/
    func testJSONLD() throws {
        let address = Envelope(ARID())
            .addType("PostalAddress")
            .addAssertion("addressLocality", "Colorado Springs")
            .addAssertion("addressRegion", "CO")
            .addAssertion("postalCode", "80840")
            .addAssertion("streetAddress", "100 Main Street")
        let url = Envelope("http://www.example.com")
            .addAssertion("sameAs", "https://www.facebook.com/")
            .addAssertion("sameAs", "https://www.linkedin.com/")
            .addAssertion("sameAs", "http://www.twitter.com/")
            .addAssertion("sameAs", "http://www.instagram.com/")
            .addAssertion("sameAs", "http://plus.google.com/")
        let _/*john*/ = Envelope(ARID())
            .addAssertion("@context", "https://schema.org")
            .addAssertion("address", address)
            .addAssertion("colleague", "http://www.example.com/JohnColleague.html")
            .addAssertion("colleague", "http://www.example.com/JameColleague.html")
            .addAssertion("email", "info@example.com")
            .addAssertion("image", "janedoe.jpg")
            .addAssertion("jobTitle", "Research Assistant")
            .addAssertion("name", "Jane Doe")
            .addAssertion("alumniOf", "Dartmouth")
            .addAssertion("birthPlace", "Philadelipha, PA")
            .addAssertion("birthDate", try Date(iso8601: "1979-10-12"))
            .addAssertion("height", "72 inches")
            .addAssertion("gender", "female")
            .addAssertion("memberOf", "Republican Party")
            .addAssertion("nationality", "Albanian")
            .addAssertion("telephone", "(123) 456-6789")
            .addAssertion("url", url)
//        print(john.format)
//        print(john.mermaidFormat())
    }
    // https://neo4j.com/press-releases/neo4j-financial-services-momentum/
    func testNeo4j() throws {
        let follows = Envelope("FOLLOWS")
            .addAssertion("ARITY", "*")
        let mentions = Envelope("MENTIONS")
            .addAssertion("ARITY", "*")
        let retweets = Envelope("RETWEETS")
            .addAssertion("ARITY", "?")
        let posts = Envelope("POSTS")
            .addAssertion("ARITY", "*")
        let user = Envelope("User")
            .addAssertion(follows, "User")
            .addAssertion(posts, "Tweet")
        let using = Envelope("USING")
            .addAssertion("ARITY", "1")
        let contains = Envelope("CONTAINS")
            .addAssertion("ARITY", "*")
        let tags = Envelope("TAGS")
            .addAssertion("ARITY", "*")
        let postedBy = Envelope("POSTED_BY")
            .addAssertion("ARITY", "1")
        let _/*tweet*/ = Envelope("Tweet")
            .addAssertion(mentions, user)
            .addAssertion(retweets, "Tweet")
            .addAssertion(using, "Source")
            .addAssertion(contains, "Link")
            .addAssertion(tags, "Hashtag")
            .addAssertion(postedBy, "User")
//        print(tweet.format)
//        print(tweet.mermaidFormat())
    }
    
    // https://docs.stardog.com/assets/images/tutorials/learn-sparql/rdf-beatles.png
    func testRDF() throws {
        let john = Envelope(":John_Lennon")
            .addType(":SoloArtist")
            .addAssertion(.hasName, "John Lennon")
        let paul = Envelope(":Paul_McCartney")
            .addType(":SoloArtist")
            .addAssertion(.hasName, "Paul McCartney")
        let george = Envelope(":George_Harrison")
            .addType(":SoloArtist")
            .addAssertion(.hasName, "George Harrison")
        let ringo = Envelope(":Ringo_Starr")
            .addType(":SoloArtist")
            .addAssertion(.hasName, "Ringo Starr")
        let theBeatles = Envelope(":The_Beatles")
            .addType(":Band")
            .addAssertion(.hasName, "The Beatles")
            .addAssertion(":member", john)
            .addAssertion(":member", paul)
            .addAssertion(":member", george)
            .addAssertion(":member", ringo)
        let loveMeDo = Envelope(":Love_Me_Do")
            .addType(":Song")
            .addAssertion(.hasName, "Please Please Me")
            .addAssertion("length", 125)
            .addAssertion(":writer", ":Paul_McCartney")
            .addAssertion(":writer", ":John_Lennon")
        let _/*pleasePleaseMe*/ = Envelope(":Please_Please_Me")
            .addType(":Album")
            .addAssertion(.hasName, "Please Please Me")
            .addAssertion(.date, try Date(iso8601: "1963-03-22"))
            .addAssertion(":artist", theBeatles)
            .addAssertion(":track", loveMeDo)
//        print(pleasePleaseMe.format)
    }
}
